---
export interface Props {
  title: string;
  description: string;
  keywords: string;
  author: string;
  
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={Astro.props.description} />
		<meta name="keywords" content={Astro.props.keywords} />
		<meta name="author" content={Astro.props.author} />
		<title>{Astro.props.title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="preload" href="/img/javoru2.webp" as="image">
    <link rel="preload" href="/projects/project1.svg" as="image">
    <link rel="preload" href="/projects/project2.svg" as="image">
    <style>
      .page-content {
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
      }
      .page-loaded .page-content {
        opacity: 1;
      }
    </style>
  </head>
  <body class="font-sans antialiased min-h-screen overflow-x-hidden">
    <div class="page-content">
      <slot />
    </div>
    
    <script>
      import { initAnimations } from '../scripts/animations.js';
      
      // Initialize animations when the DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        // Add a small delay to ensure all resources are loaded
        setTimeout(() => {
          // Add the loaded class to show the content with fade
          document.body.classList.add('page-loaded');
          // Initialize animations
          initAnimations();
        }, 100);
      });
    </script>
  </body>
</html>

<style is:global>
  	:root {
		color-scheme: light dark;
	}
  html {
    scroll-behavior: smooth;
  }
  
  body {
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
    line-height: 1.6;
    @apply bg-white dark:bg-[#0F0F0F] text-black dark:text-white transition-colors duration-300;
  }
  
  /* Smooth transitions */
  * {
    transition: color 0.3s ease, background-color 0.3s ease, border-color 0.3s ease, transform 0.3s ease, opacity 0.3s ease;
  }
  
  /* Custom scrollbar */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-gray-100 dark:bg-gray-900;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-gray-300 dark:bg-gray-700 rounded-full;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-gray-400 dark:bg-gray-600;
  }
  
  /* Focus styles */
  button:focus,
  input:focus,
  textarea:focus,
  a:focus {
    @apply outline-2 outline-blue-500 dark:outline-blue-400 outline-offset-2;
  }
  
  /* Selection styles */
  ::selection {
    @apply bg-blue-500 dark:bg-blue-600 text-white;
  }
</style>